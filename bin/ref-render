#!/usr/bin/env node

var Handlebars = require('handlebars');
var program = require('commander');
var mdconf = require('mdconf');
var conjoin = require('conjoin');
var readline = require('readline');
var exec = require('child_process').exec;
var Path = require('path');
var fs = require('fs');
var options = require('../lib/options');
var utils = require('../lib/utils');

var local;
try {local = require(process.cwd() + '/package.json')}catch(e){local = {}};

var conf = local;
var rc = require('rc')('ref', conf);

// cli
program.usage('<template> <output> [options]')

// apply options
options(program, conf);

// parse args
var args = program.parse(process.argv);
var argv = process.argv.slice(1);

if (Path.basename(argv[0]) !== Path.basename(__filename)) argv.shift()

var inFile = argv[1];
var outFile = argv[2];
var rest = argv.slice(2);

if (!(inFile && outFile)) program.help();

var data = utils.resolvePackage(program);

partial();

function partial(){
  var partialPath = process.cwd() + '/.ref/' + inFile;
  fs.exists(partialPath, function(exists){
    if (!exists) {
      data = merge(program, local, {}, data);
      console.log('data: ', data);
      return run();
    }
    fs.readFile(partialPath, 'utf8', function(err, partialRaw){
      // TODO
      // do this for other formats
      // json, yaml, ini
      var parsed = mdconf(partialRaw);
      data = merge(program, local, parsed, data);
      console.log('data: ', data);
      run();
    });
  });
}

function run(){
  if (data.isCli) {
    exec(data.name + ' --help ' + rest.join(' '), function(err, stdout){
      if (err) return console.error(err);
      data.usage = stdout;
      compile(complete);
    });
  } else {
    compile(complete);
  }
}

function compile(fn){
  fs.readFile(__dirname + '/../templates/' + inFile, 'utf8', function(err, str){
    if (err) return console.error(err);
    var template = Handlebars.compile(str);
    var compiled = cleanup(template(data))
    ask('look good? [Yn]', compiled, function(answer){
      if (answer.length && answer.charAt(0).toLowerCase() !== 'y') return;
      fs.writeFile(outFile, compiled, 'utf8', function(err){
        if (err) return console.error(err);
        fn(compiled);
      })
    });
  });
};

function ask(question, output, fn){
  display(output);
  console.log();

  // hide cursor
  process.stdout.write('\033[?25l');

  var rl = readline.createInterface(process.stdin, process.stderr);
  rl.question(question + ' ', function (answer) {
    rl.close();
    // show cursor
    process.stdout.write('\033[?25h');
    fn(answer);
  });
}

function complete(str){
  // nothing here
}

function display(str){
  // clear
  process.stdout.write('\u001B[2J');
  var code = false;
  var arr = str.split('\n');
  for (var i = 0, l = arr.length; i < l; i++) {
    var val = arr[i];
    if (/^#/.test(val)) val = '\033[37m' + val + '\033[0m';
    if (/```/.test(val)) code = !code;
    if (code) val = '\033[90m' + val + '\033[0m';
    process.stdout.write('\n  ' + val);
  }
}

function cleanup(str){
  // TODO
  // this thing sucks
  return str
    .replace(/\n\n\n\n\n\n/g, '\n\n')
    .replace(/\n\n\n\n\n/g, '\n\n')
    .replace(/\n\n\n\n/g, '\n\n')
    .replace(/\n\n\n/g, '\n\n');
}

function merge(a, b, c, d){
  var z = conjoin(a, b, c, d);
  delete z.options;
  Object.keys(z).map(function(key){
    if (key.charAt(0) === '_') delete z[key];
  });
  return z;
}

#!/usr/bin/env node

var conf = {};
var rc = require('rc')('ref', conf);
var spawn = require('child_process').spawn;

var program = require('commander');
var commands = conf.commands;
var options = require('../lib/options');
var utils = require('../lib/utils');

// version
getFirst('-V, --version', function(){
  console.log(require('../package.json').version);
});

// apply options
options(program, conf);

program.on('--help', function(){
    console.log('  Commands:');
    console.log();
    console.log('    tag                          create and push annotated tag');
    console.log('    readme                       generate Readme.md');
    console.log('    package                      generate package.json');
    console.log('    license                      generate License');
    console.log('    render <template> <output>   render template to output');
    console.log();
  });

if (commands) {
  program.on('--help', function(){
    if (program.hideCustom) return;
    console.log('  Custom Commands:');
    console.log();
    logCommands();
    console.log();
  });
}

// parse args
var args = program.parse(process.argv);
var rest = process.argv.slice(2);
var cmd = rest.shift();

var package = utils.resolvePackage(program);

if (conf.commands && conf.commands[cmd]) {
  run(parseCustom(cmd));
} else {
  switch (cmd) {
    case 'readme': runRender('Readme.md'); break;
    case 'license': runRender('License'); break;
    case 'package': runRender('package.json'); break;
    case 'render': runRender(); break;
    case 'tag': tag(); break;
    default:
      program.help();
      process.exit(0);
  };
}

function tag(){
  var vns = package.version;
  run({cmd: 'git', args: ['tag', '-a', vns,'-m', 'release ' + vns]} , function(){
    run('git push origin ' + vns);
  });
}

function run(obj, fn){
  fn = fn || noop;
  if (typeof obj === 'string') obj = parseCmd(obj);
  var proc = spawn(obj.cmd, obj.args, {stdio: 'inherit'});
  proc.on('exit', function(code){
    if (code > 0) return process.exit(code);
    fn();
  });
  return proc;
}

function runRender(name, output){
  if (!name) {
    name = rest.shift();
    output = rest.shift();
  }
  output = output || name;
  return run({cmd: 'ref-render', args: [name, output].concat(rest)});
}

function parseCmd(str){
  var args = str.split(' ');
  var cmd = args.shift();
  return {
    cmd: cmd,
    args: args
  };
}

function parseCustom(handle){
  var str = conf.commands[handle];
  str = str.split('##');
  var args = str.shift().trim();
  var comment = str.shift().trim();
  args = args.split(' ');
  var cmd = args.shift().trim();
  return {
    handle: handle,
    cmd: cmd,
    args: args.concat(rest),
    comment: comment
  };
}


function logCommands(){
  var maxCmd = 0;
  var maxArg = 0;
  Object.keys(commands).map(function(c){
    var v = parseCustom(c);
    v = v.cmd + v.args + '`` ';
    maxCmd = maxCmd > c.length ? maxCmd : c.length;
    maxArg = maxArg > v.length ? maxArg : v.length;
  });
  maxCmd += 4;
  maxArg += 4;
  for (var k in commands) {
    var cmd = parseCustom(k);
    var cmdargs = '`' + cmd.cmd + ' ' + cmd.args + '`';
    var w = 15;
    var space1 = new Array(maxCmd).join(' ').slice(cmd.handle.length);
    var space2 = new Array(maxArg).join(' ').slice(cmdargs.length);
    console.log('    ' + cmd.handle + space1 + cmdargs + space2 + cmd.comment);
  }
}

function getFirst(str, fn){
  var parts = str.split(', ');
  var short = parts.shift();
  var long = parts.shift();
  var argv = process.argv;
  if (!((argv[2] === short || argv[2] === long) && !argv[3])) return;
  fn();
  process.exit(0);
}


function noop(){}
